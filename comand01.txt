https://www.tabnine.com/

https://github.com/nunidoron/AdvancedDevOpsCourse


################# Linux #######################
rm -rf # dell dir
du -sh <Dir> #size of dir 
systemctl list-unit-files |grep 'enabled' #list activ service
sudo apt update && sudo apt upgrade -y

$ echo -n "Enter Password: " && head -1 </dev/stdin | tr -d '\n' | sha256sum | cut -d" " -f1  #create a hash sha256 password



echo ''' #ignore next special character
> '\''
> '''


https://chmod-calculator.com/
yum install -y unzip wget mc httpd #install on redhat
ps -ef |grep nexus #kill process 
kill -9 1445

sudo -i # to root 

crl z # מעביר לרקע
fg enter# מחזיר 

tail -f /opt/sonatype-work/nexus3/log/nexus.log
usermod -a -G examplegroup exampleusername #Add an Existing User Account to a Group

ps -ef |grep httpd |grep -v 'grep' |awk '{print $2}' |xargs kill - kill pcoses
dpkg -i tree_1.8.0-1_amd64.deb #debian install package 
touch test{1..5}.txt #creat multi file
cp /tmp/2120_ben_resume/2120_ben_resume/* /var/www/html/ -r copy
systemctl enable httpd #  enable service
mkdir -p /f/vagrant-vms/wordpress
ln -s #link file
vim /etc/netplan/50-vagrant.yaml # set ip
sudo netplan apply
 ss -tunlp |grep 11211 #netstat
curl -s https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.rpm.sh | sudo bash # install from script

echo $OLDPWD # מראה נתיב קודם

[root@db01 ~]# vim /etc/profile # הכנה של משתנה קבוע
[root@db01 ~]# source /etc/profile
[root@db01 ~]# echo $DATABASE_PASS

$? # מצב פקודה אחרונה
tail -f /var/log/dmesg #read log online
 
Mem=$(free -m |grep Mem |awk '{print $4}') # טעינה של פלט פקודה למשתנה
for i in $(git log --oneline  |awk '{print $1}');do git show $i #split
df -h |grep "\-root" |awk '{print $2}' # \ מתעלם מסימן מיוחד הבא אחריו

סופר כרטיסי רשת מתעלם מ הלוקאלי
ip addr show |grep -v LOOPBACK |grep -ic mtu # v מתעלם # ic count
#ssh
ssh devops@web01 uptime # remote command 

ssh-keygen # יצירת מפתח
ssh-copy-id devops@web01 # העתקה שלו לשרת מרוחק

scp test.sh devops@web01:/tmp/ # send file test.sh to web01 in /tmp

ssh -i /c/Users/lupo2/Documents/devops/Amazon/servers/test/gymso/gymso-dev-nvir.pem  centos@54.237.215.205 #חיבור לשרת מרוחק עם מפתח באמזון


lsof # Open file 

cron job https://crontab.guru/


#bash

#!/bin/bash
echo "Hello"
read -p " type a number:" num
echo "you type $num ckecing..."
sleep 1
if [ $num -gt 100 ] # שם לב לרווח !!!
then
        echo "$num is gt 100"
elif [ $num -eq 100 ]
then
        echo "$num is eq 100"
else
        echo "$num is lt 100"
fi
echo $num1

תרגיל ניטור מצב תהליך HTTPD
#!/bin/bash

ls /var/run/httpd/httpd.pid &> /dev/null
var1=$? # שם לב אין רווחים !!

if [ $var1 -ne 0 ] # בודק מצב של פקודה אחרונה (יש דרך טובה יותר לבדוק זה סתם לתרגיל)
then
          echo "#######################" &>> /var/log/monitor_httpd.log # to Log file
  date &>> /var/log/monitor_httpd.log
  echo "httpd service is down" &>> /var/log/monitor_httpd.log
  echo "I'm trying to start it"  &>> /var/log/monitor_httpd.log
  systemctl start httpd
  stat=$(systemctl status httpd |grep "Active:" |awk '{print $3}' |awk -F'(' '{print$2}'|awk -F')' '{print$1}')
   if [ $stat=running ]
   then
      echo "I succeeded"  &>> /var/log/monitor_httpd.log
   else
      echo "Something's wrong" &>> /var/log/monitor_httpd.log
    fi
else
 echo "httpd is up"

fi

#loop

#!/bin/bash

for var in guy lupo yuval daniel ira
 do
 echo $var
 done

#!/bin/bash

count=0

while [ $count -lt 10 ]
do
 count=$(($count + 1))
 echo "$count"
done

for i in `cat remhost` ; do  echo $i ; done #remhost is a file whit list

for i in `cat remhost` ; do ssh  devops@$i uptime ; done # run remote command on multi servers
for i in `cat remhost` ; do scp websetupmulti.sh devops@$i:/tmp/ ; ssh devops@$i chmod +x /tmp/websetupmulti.sh ; ssh devops@$i  /tmp/websetupmulti.sh ; done   # send script file websetupmulti.sh to servers end run it




##################devops###################### 
#vagrant 

vagrant init "ubuntu/trusty64" #from https://app.vagrantup.com/boxes/search
vagrant up start vm
vagrant halt stop stop vm
vagrant ssh #connect
vagrant halt # stop


#CODE BUILD & DEPLOY

git clone -b local-setup https://github.com/devopshydclub/vprofile-project.git # get the surs code 
mvn install #Build code


#mysql 

connnection.ping()  # reconnecting mysql 

CREATE USER 'lupo'@'%' IDENTIFIED BY 'pass'; # CREATE USER
CREATE USER 'DBA'@'%' IDENTIFIED BY '<pass>';
GRANT ALL PRIVILEGES ON *.* TO 'DBA'@'%'; # super user


CREATE DATABASE testdb01; #CREATE DATABASE
CREATE TABLE pet (name VARCHAR(20), owner VARCHAR(20),
       species VARCHAR(20), sex CHAR(1), birth DATE, death DATE);
	   
INSERT INTO pet VALUES ('Puffball','Diane','hamster','f','1999-03-30',NULL); # add line to DB	   
GRANT ALL PRIVILEGES ON testdb01 TO 'lupo'@'%';
FLUSH PRIVILEGES; !!! Saving updates to the user privileges


SELECT * FROM pet where name = 'start';






 mysql -u root -padmin123 -e "FLUSH PRIVILEGES" #run command
mysql -u root -padmin123 accounts </root/vprofile-project/src/main/resources/db_backup.sql #restor 



#Git

cat .git/config 

git init # הפעלה
git config --global user.mail
git config --global user.name

git clone https://github.com/lupo218/DevOps_Class.git # חיבור לפרוייקט קיים
git add .
git commit -m "test" -a
git push




git remote add origin https://github.com/lupo218/Documents.git # חיבור לענן
git pull https://github.com/lupo218/Documents.git main



git branch -c spirnt1 #new branch
git branch -a #list branch
git branch --set-upstream-to main/selenium03_Dev01 # main ראשי selenium03_Dev01 ענף
חשוב לקרוא כ ראשי/ענף


…or push an existing repository from the command line
git remote add origin https://github.com/lupo218/Documents.git
git branch -M main
git push -u origin main
git pull origin main

git reflog #log of all  !!! יכול להציל אם לא שמרת שינויים 






git checkout spirnt1 #Switched to branch 'spirnt1'
git rm # deleted
git status
git mv # rename move
git add . # add file and folder to index
git commit -m
git revert {log num} -m 

git push origin spirnt1 # pust to spirnt1 branch
git pull # get chened
git switch spirnt1
merge
go to the branch you what to merge with
git switch main 
git merge spirnt1  # run the merge with tha branch

vim .gitignore #list of file that git will ignore

git push --all origin

Rollback

git checkout file # if the file was not commit can dwonlod it back 
git diff #show diffrent
git restore --staged  saturn1.py # if you did add .

git log --graph  --oneline  --all # get version
git checkout d6b6f5c # returnt to version number # only view (you can copy to new branch)



Reverting Working Copy to Most Recent Commit
To revert to the previous commit, ignoring any changes:

git reset --hard HEAD
where HEAD is the last commit in your current branch

Reverting The Working Copy to an Older Commit
To revert to a commit that's older than the most recent commit:

# Resets index to former commit; replace '56e05fced' with your commit code
git reset 56e05fced 

# Moves pointer back to previous HEAD
git reset --soft HEAD@{1}

git commit -m "Revert to 56e05fced"

# Updates working copy to reflect the new commit
git reset --hard




#aws

https://aws.amazon.com/cli/
pip install awscli # pycharm conect to aws console
boto3


C:\Users\lupo2\.aws\config
[default]
region = us-east-1 # חשוב מאוד עושה בעיות ולא נותן הודעת שגיאה בתהחברות
output = json


aws ec2 describe-instances
aws ec2 describe-instances --filter #https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html
aws ec2 stop-instances --instances-ids xxxx xxxx
aws ec2 start-instances --instances-ids xxxx xxxx











#Jenkins

set versions
mkdir -p versions
#cp target/vprofile-v2.war versions/vprofile-v$BUILD_ID.war



Jenkinsfile

pipeline {
    agent any

    stages {
        stage('Hello') {
            steps {
                sh '''
                python3 name.py
                '''
            }
        }
    }
}


#######docker
docker run -d -p 80:80 nginx:alpine # הפעלה 
docker run -d -p 8090:8088 --name superset apache/superset #local port:dockerport

docker run hello-world # test install 
/var/lib/docker/containers #peth

docker pull nginx:alpine # התקנה של מערכת
docker ps # רשימה של דוקרים
docker images # רשימה של 
docker ps -a #  וקבלה של ID מצב שרות
docker rm -vf 9d74ad12b2e6 #מחיקה של הדוקר על מי הID 
docker rmi nginx # remove the image file
docker exec -it 42e46c30c9f9 ls #הרצה של פקודה  -it mean interactiv  .. not the name of the docker
docker exec -it 42e46c30c9f9 /bin/bash # פתיחה של הדוקר בטרמינל
docker log  42e46c30c9f9
docker run -it # open in interactiv 
docker kill  ID
exit # יציאה

docker system prune #cleen


docker run -p nginx # מריץ כתהליך חי במסךולא ברקע , עוזר למצוא תקלות

docker inspect feb5d9fea6a5 #show what run in the docker
docker inspect mysql:5.7

docker run -d -P -e MYSQL_ROOT_PASSWORD=mypass mysql:5.7 # -e set variable to the running docker
docker run -d -P -e MYSQL_ROOT_PASSWORD=mypass -p 3030:3306 -v /home/lupo/vprodbdata:/var/lib/mysql  mysql:5.7 # the local dir to the docker dir . you can find it using the docker inspect command

docker inspect feb5d9fea6a5 #show what run in the docker
docker inspect mysql:5.7


#Dockerfile simpel
FROM ubuntu:latest
CMD ["echo", "Hello"]

docker build -t google_guy . #בניה של דוקר לא לשכוח את הנקודה !!!
docker logs



#דוגמא להרצה של דוקר שמחכה לקלט מהמשתמש
FROM ubuntu:latest
ENTRYPOINT ["echo"]

בניה:
docker build -t echo .

הפעלה:
docker run printer "testr"

#אפשר להכניס את הפרמטר אח"כ בפקודה שניה וככה ניתן להריץ סקריפטים עם משתנים
FROM ubuntu:latest
ENTRYPOINT ["echo"]
CMD ["Hlloo"]


#דוגמא של בנית אפליקצית פייתון
#ap.py
from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello_world():
   return 'Hello! I am a Flask application'
if __name__ == '__main__':
   app.run(host='0.0.0.0')



#Dockerfile
From python:alpine
COPY ap.py /app/
RUN pip install flask  # הרצה של פקודה בתוך הדוקר 
CMD python /app/ap.py # הפקודה שהדוקר יריץ בהפעלה


<<<<<<< HEADp

docker build -t ap .  #בניה של הדוקר
=======
#https://www.udemy.com/course/decodingdevops/learn/lecture/26466588#overview התקנה של שרת אנטרנט

FROM ubuntu:latest
LABEL "AUTHOR" = "GUY"
RUN apt update
RUN apt install apache2 git -y
CMD ["/usr/sbin/apache2ctl","-D","FOREGROUND" ]
EXPOSE 80
WORKDIR /var/www/html
VOLUME /var/log/apache2
ADD nano.tar.gz /var/www/html   #not like copy ADD also open tha tar file  

#project get fom git
From ubuntu:latest
ADD templates /app/templates
RUN apt update
RUN apt install python3 git pip -y
RUN git clone https://github.com/lupo218/World-of-games.git /app/git_temp
RUN ls /app/git_temp
RUN cp -r /app/git_temp/* /app && rm -R /app/git_temp/*
RUN ls /app
RUN pip install -r /app/requirements.txt
WORKDIR /app
#CMD python3 MainScores.py
CMD ["python3", "MainScores.py"] #run in background








docker build -t ap #בניה של הדוקר
>>>>>>> 8fdcaa776d5ed1bdb8b4d3987c2713ed94b4c709
docker run -d -p 5000:5000 ap # הרצה של הדוקר

docker logs [OPTIONS] CONTAINER 
docker logs 5039b226c331

#Docker Compose
https://docs.docker.com/compose/gettingstarted/
docker-compose up -d
docker-compose up --build # בניה מחדש לאחר כול שינוי בקוד




#################kubernetes

cat .kube/config # from hom dir the cluster conf file
minikube start --driver vmware
minikube.exe service hello-minikube --url # get the url address
minikube.exe status
minikube ip # get the cluster ip pod Inside the cluster NOT work with localhost !!!



kubectl cluster-info
kubectl get all
kubectl get nodes

kubectl get all -n kubernetes-dashboard # see all 



kubectl get po,svc,deploy

#create #https://www.youtube.com/watch?v=X48VuDVv0do&t=114s
kubectl create deployment nginx-depl --image=nginx

kubectl get pod
kubectl get deployment
kubectl get namespace
#https://youtu.be/X48VuDVv0do?t=6421

kubectl create namespace jenkins


kubectl edit deployment #yaml יכול לשנות הגדרות הפצה אם נדרש והמערכת מעדכנת לבד את המכונות (נגיד לגרסא חדשה


#debugin
kubectl get pod -o wide # ip ...
kubectl get pod --watch # see live 
kubectl logs nginx-depl-5ddc44dd46-jd5jx
kubectl describe pod nginx-depl-5ddc44dd46-jd5jx
kubectl describe svc airflow-gate # בשלוב הפקודה למעלה יכול לבדוק תקנות של הפניות רשת
https://youtu.be/X48VuDVv0do?t=4390

kubectl describe cm -n monitoring prometheus-grafana-datasource

kubectl exec -it nginx-depl-7d459cf5c8-whkb7 -- ls #run command
kubectl exec -it nginx-depl-7d459cf5c8-whkb7 -- sh# פותח קונסול קצת מטעה בגלל שכאילו המסך ריק אבל אפשר להריץ פקודות
kubectl get deployment nginx -o yaml >test.yaml     get yaml file # get status 
#https://youtu.be/X48VuDVv0do?t=4487





#create #https://minikube.sigs.k8s.io/docs/handbook/accessing/
kubectl create deployment test5-deployment --image apache/superset
kubectl expose deployment test5-deployment --type=NodePort --port=8088
minikube.exe  service test5-deployment --url

#cleen
kubectl get svc
kubectl delete svc hello-minikube
kubectl get deploy
kubectl delete deploy hello-minikube
kubectl get pods
kubectl delete pod 
#or
kubectl delete  -f client-pod.yaml

#remove cluster
minikube.exe stop
minikube.exe delete


kubectl get namespaces
kubectl get nodes -o yaml
kubectl describe nodes
kubectl get replicaset

kubectl get pod -o wide 
kubectl get pod nginx -o yaml
kubectl describe pod nginx # get log last Message
kubectl logs nginx

kubectl apply -f vproapppod.yaml
kubectl delete -f vproapppod.yaml # מחיקה של כל הרכיבים
#https://youtu.be/X48VuDVv0do?t=4568

#update deploy image name
kubctl set image deployment/xxx = new image name from git hub

#yaml

apiVersion: v1
kind: Service
metadata:
  name: fe-gate
spec:
  selector:
    name: nginx
  type: NodePort
  ports:
  - name: foo # Actually, no port is needed.
    port: 80
    targetPort: 80
---
apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    name: nginx
spec:
  #hostname: frontend001
  containers:
  - image: nginx
    name: nginx-container
	
#exsaple of LoadBalancer set up
apiVersion: v1
kind: Service
metadata:
  name: gate
spec:
  selector:
    name: superset
  type: LoadBalancer
  ports:
  - protocol: TCP
    port: 8088
    targetPort: 8088
    nodePort: 30000 # must be  30000 -32000
---
apiVersion: v1
kind: Pod
metadata:
  name: superset
  labels:
    name: superset
spec:
  containers:
  - image: apache/superset
    name: superset-container	

	
https://gitlab.com/nanuchi/youtube-tutorial-series/-/tree/master/demo-kubernetes-components #yaml exampl
#https://youtu.be/X48VuDVv0do?t=4765 #demp project

#Secret file 
#https://youtu.be/X48VuDVv0do?t=4959
 
echo -n 'password' |base64   # conver string to base64 secret file
#https://youtu.be/X48VuDVv0do?t=5057


#cleen
kubectl get svc
kubectl delete svc fe-gate
kubectl get pod
kubectl delete pod nginx



#volumes
minikube ssh #login to the cluster
kubectl get pv
kubectl get pvc


kubectl get storageclass
kubectl describe storageclass





##helm

helm repo add bitnami https://charts.bitnami.com/bitnami 
helm repo add stable https://charts.helm.sh/stable


helm install test bitnami/redis






